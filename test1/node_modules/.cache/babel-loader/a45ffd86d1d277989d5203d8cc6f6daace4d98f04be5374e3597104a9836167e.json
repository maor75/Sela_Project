{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\avida\\\\PycharmProjects\\\\Final_Project\\\\App_Project\\\\test1\\\\src\\\\components\\\\UI\\\\table\\\\table.jsx\",\n  _s = $RefreshSig$();\n// CustomerTable1.js\n\nimport cl from './table.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomerTable1({\n  FetchUrl\n}) {\n  _s();\n  const [customers, setCustomers] = useState([]);\n  const [selectedRows, setSelectedRows] = useState(new Set());\n  useEffect(() => {\n    fetch(FetchUrl).then(response => response.json()).then(data => setCustomers(data.table)).catch(error => console.error('Error fetching customers:', error));\n  }, [FetchUrl]);\n  const handleRowClick = rowIndex => {\n    setSelectedRows(prevSelectedRows => {\n      const newSelectedRows = new Set(prevSelectedRows);\n      if (newSelectedRows.has(rowIndex)) {\n        newSelectedRows.delete(rowIndex);\n      } else {\n        newSelectedRows.add(rowIndex);\n      }\n      return newSelectedRows;\n    });\n  };\n  const handleDeleteRow = _id => {\n    fetch(`http://localhost:8000/delete/${_id}`, {\n      method: 'POST'\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n      // Optionally, update the state or UI as needed after deletion\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  const handleEditRow = (_id, updatedCustomerData) => {\n    fetch(`http://localhost:8000/update/${_id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updatedCustomerData)\n    }).then(response => response.json()).then(data => {\n      console.log('Success:', data);\n      // Optionally, update the state or UI as needed after edit\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: cl.container,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [customers.length > 0 && Object.keys(customers[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: key\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: customers.map((customer, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: selectedRows.has(rowIndex) ? cl.selectedRow : '',\n          onClick: () => handleRowClick(rowIndex),\n          children: [Object.values(customer).map((value, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: value\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDeleteRow(customer._id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditRow(customer._id, customer),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, rowIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomerTable1, \"OU+nVLBUJpG4TViLaky9UBLXObw=\");\n_c = CustomerTable1;\nexport default CustomerTable1;\nvar _c;\n$RefreshReg$(_c, \"CustomerTable1\");","map":{"version":3,"names":["cl","React","useState","useEffect","jsxDEV","_jsxDEV","CustomerTable1","FetchUrl","_s","customers","setCustomers","selectedRows","setSelectedRows","Set","fetch","then","response","json","data","table","catch","error","console","handleRowClick","rowIndex","prevSelectedRows","newSelectedRows","has","delete","add","handleDeleteRow","_id","method","log","handleEditRow","updatedCustomerData","headers","body","JSON","stringify","children","className","container","length","Object","keys","map","key","fileName","_jsxFileName","lineNumber","columnNumber","customer","selectedRow","onClick","values","value","colIndex","_c","$RefreshReg$"],"sources":["C:/Users/avida/PycharmProjects/Final_Project/App_Project/test1/src/components/UI/table/table.jsx"],"sourcesContent":["// CustomerTable1.js\r\n\r\nimport cl from './table.module.css'\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction CustomerTable1({ FetchUrl }) {\r\n  const [customers, setCustomers] = useState([]);\r\n  const [selectedRows, setSelectedRows] = useState(new Set());\r\n\r\n  useEffect(() => {\r\n    fetch(FetchUrl)\r\n      .then(response => response.json())\r\n      .then(data => setCustomers(data.table))\r\n      .catch(error => console.error('Error fetching customers:', error));\r\n  }, [FetchUrl]);\r\n\r\n  const handleRowClick = (rowIndex) => {\r\n    setSelectedRows(prevSelectedRows => {\r\n      const newSelectedRows = new Set(prevSelectedRows);\r\n      if (newSelectedRows.has(rowIndex)) {\r\n        newSelectedRows.delete(rowIndex);\r\n      } else {\r\n        newSelectedRows.add(rowIndex);\r\n      }\r\n      return newSelectedRows;\r\n    });\r\n  };\r\n\r\n  const handleDeleteRow = (_id) => {\r\n    fetch(`http://localhost:8000/delete/${_id}`, {\r\n        method: 'POST',\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log('Success:', data);\r\n        // Optionally, update the state or UI as needed after deletion\r\n    })\r\n    .catch((error) => {\r\n        console.error('Error:', error);\r\n    });\r\n  };\r\n\r\n  const handleEditRow = (_id, updatedCustomerData) => {\r\n    fetch(`http://localhost:8000/update/${_id}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(updatedCustomerData),\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log('Success:', data);\r\n        // Optionally, update the state or UI as needed after edit\r\n    })\r\n    .catch((error) => {\r\n        console.error('Error:', error);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <table className={cl.container}>\r\n        <thead>\r\n          <tr>\r\n            {customers.length > 0 && Object.keys(customers[0]).map(key => (\r\n              <th key={key}>{key}</th>\r\n            ))}\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {customers.map((customer, rowIndex) => (\r\n            <tr\r\n              key={rowIndex}\r\n              className={selectedRows.has(rowIndex) ? cl.selectedRow : ''}\r\n              onClick={() => handleRowClick(rowIndex)}\r\n            >\r\n              {Object.values(customer).map((value, colIndex) => (\r\n                <td key={colIndex}>{value}</td>\r\n              ))}\r\n              <td>\r\n                <button onClick={() => handleDeleteRow(customer._id)}>Delete</button>\r\n                <button onClick={() => handleEditRow(customer._id, customer)}>Edit</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomerTable1;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}